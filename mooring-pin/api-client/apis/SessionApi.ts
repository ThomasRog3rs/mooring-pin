/* tslint:disable */
/* eslint-disable */
/**
 * AquaTrail_Data
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckSessionTypeModel,
  RegisterSessionModel,
  SessionTypeModel,
} from '../models/index';
import {
    CheckSessionTypeModelFromJSON,
    CheckSessionTypeModelToJSON,
    RegisterSessionModelFromJSON,
    RegisterSessionModelToJSON,
    SessionTypeModelFromJSON,
    SessionTypeModelToJSON,
} from '../models/index';

export interface SessionRegisterPostRequest {
    registerSessionModel?: RegisterSessionModel;
}

/**
 * 
 */
export class SessionApi extends runtime.BaseAPI {

    /**
     */
    async sessionCheckSessionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckSessionTypeModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Session/check-session`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckSessionTypeModelFromJSON(jsonValue));
    }

    /**
     */
    async sessionCheckSessionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckSessionTypeModel> {
        const response = await this.sessionCheckSessionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sessionRegisterPostRaw(requestParameters: SessionRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionTypeModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Session/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterSessionModelToJSON(requestParameters['registerSessionModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionTypeModelFromJSON(jsonValue));
    }

    /**
     */
    async sessionRegisterPost(requestParameters: SessionRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionTypeModel> {
        const response = await this.sessionRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
