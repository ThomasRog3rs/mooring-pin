/* tslint:disable */
/* eslint-disable */
/**
 * AquaTrail_Data
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GeoJsonModel,
} from '../models/index';
import {
    GeoJsonModelFromJSON,
    GeoJsonModelToJSON,
} from '../models/index';

export interface GeoJsonAllGetRequest {
    searchCoordinates?: string;
    searchDistance?: number;
}

export interface GeoJsonGeoJsonByIdGetRequest {
    id?: number;
}

export interface GeoJsonGeoJsonByIdsGetRequest {
    ids?: Array<number>;
}

export interface GeoJsonMarinasGetRequest {
    searchCoordinates?: string;
    searchDistance?: number;
}

export interface GeoJsonMooringsGetRequest {
    searchCoordinates?: string;
    searchDistance?: number;
}

export interface GeoJsonServicesGetRequest {
    searchCoordinates?: string;
    searchDistance?: number;
}

/**
 * 
 */
export class GeoJsonApi extends runtime.BaseAPI {

    /**
     */
    async geoJsonAllGetRaw(requestParameters: GeoJsonAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJsonModel>> {
        const queryParameters: any = {};

        if (requestParameters['searchCoordinates'] != null) {
            queryParameters['searchCoordinates'] = requestParameters['searchCoordinates'];
        }

        if (requestParameters['searchDistance'] != null) {
            queryParameters['searchDistance'] = requestParameters['searchDistance'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GeoJson/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJsonModelFromJSON(jsonValue));
    }

    /**
     */
    async geoJsonAllGet(requestParameters: GeoJsonAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJsonModel> {
        const response = await this.geoJsonAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async geoJsonGeoJsonByIdGetRaw(requestParameters: GeoJsonGeoJsonByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJsonModel>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GeoJson/geoJsonById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJsonModelFromJSON(jsonValue));
    }

    /**
     */
    async geoJsonGeoJsonByIdGet(requestParameters: GeoJsonGeoJsonByIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJsonModel> {
        const response = await this.geoJsonGeoJsonByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async geoJsonGeoJsonByIdsGetRaw(requestParameters: GeoJsonGeoJsonByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJsonModel>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GeoJson/geoJsonByIds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJsonModelFromJSON(jsonValue));
    }

    /**
     */
    async geoJsonGeoJsonByIdsGet(requestParameters: GeoJsonGeoJsonByIdsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJsonModel> {
        const response = await this.geoJsonGeoJsonByIdsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async geoJsonMarinasGetRaw(requestParameters: GeoJsonMarinasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJsonModel>> {
        const queryParameters: any = {};

        if (requestParameters['searchCoordinates'] != null) {
            queryParameters['searchCoordinates'] = requestParameters['searchCoordinates'];
        }

        if (requestParameters['searchDistance'] != null) {
            queryParameters['searchDistance'] = requestParameters['searchDistance'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GeoJson/marinas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJsonModelFromJSON(jsonValue));
    }

    /**
     */
    async geoJsonMarinasGet(requestParameters: GeoJsonMarinasGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJsonModel> {
        const response = await this.geoJsonMarinasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async geoJsonMooringsGetRaw(requestParameters: GeoJsonMooringsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJsonModel>> {
        const queryParameters: any = {};

        if (requestParameters['searchCoordinates'] != null) {
            queryParameters['searchCoordinates'] = requestParameters['searchCoordinates'];
        }

        if (requestParameters['searchDistance'] != null) {
            queryParameters['searchDistance'] = requestParameters['searchDistance'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GeoJson/moorings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJsonModelFromJSON(jsonValue));
    }

    /**
     */
    async geoJsonMooringsGet(requestParameters: GeoJsonMooringsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJsonModel> {
        const response = await this.geoJsonMooringsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async geoJsonServicesGetRaw(requestParameters: GeoJsonServicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJsonModel>> {
        const queryParameters: any = {};

        if (requestParameters['searchCoordinates'] != null) {
            queryParameters['searchCoordinates'] = requestParameters['searchCoordinates'];
        }

        if (requestParameters['searchDistance'] != null) {
            queryParameters['searchDistance'] = requestParameters['searchDistance'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GeoJson/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJsonModelFromJSON(jsonValue));
    }

    /**
     */
    async geoJsonServicesGet(requestParameters: GeoJsonServicesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJsonModel> {
        const response = await this.geoJsonServicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
